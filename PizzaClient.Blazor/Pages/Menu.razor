@page "/menu"
@inject IHttpClientFactory _clientFactory

<h1>Main Menu</h1>

<div>
    <table class="table table-light table-hover">
        <thead>
            <tr>
                <th scope="col">Size</th>
                <th scope="col">Dough Multiplier</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pair in Sizes)
            {
                <tr>
                    <td>@pair.Key</td>
                    <td>@pair.Value</td>
                </tr>
            }
        </tbody>
    </table>

    <table class="table table-light table-hover">
        <thead>
            <tr>
                <th scope="col w-50">Dough</th>
                <th scope="col">Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pair in Doughs)
            {
                <tr>
                    <td>@pair.Key</td>
                    <td>@pair.Value</td>
                </tr>
            }
        </tbody>
    </table>

    <table class="table table-light table-hover">
        <thead>
            <tr>
                <th scope="col">Sauce</th>
                <th scope="col">Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pair in Sauces)
            {
                <tr>
                    <td>@pair.Key</td>
                    <td>@pair.Value</td>
                </tr>
            }
        </tbody>
    </table>

    <table class="table table-light table-hover">
        <thead>
            <tr>
                <th scope="col">Topping</th>
                <th scope="col">Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pair in Toppings)
            {
                <tr>
                    <td>@pair.Key</td>
                    <td>@pair.Value</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@*Order Form *@
<div class="page-header bg-gradient-primary-to-secondary page-header-dark" cellpadding="0">
    <EditForm Model="@Order" OnValidSubmit="@HandleSubmit">
        <Validations @ref="Validations" Mode="ValidationMode.Auto" Model="@Order" ValidateOnLoad="false">
            <Field>
                <FieldLabel>Name</FieldLabel>
                <Validation>
                    <TextEdit Placeholder="Enter name" @bind-Text="@Order.CustomerName">
                        <Feedback>
                            <ValidationError />
                        </Feedback>
                    </TextEdit>
                </Validation>
            </Field>

            <Row>
                <h5>Pizza</h5>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>Size</FieldLabel>
                        <Validation>
                            <Select TValue="string" @bind-SelectedValue="@Order.Pizza.Size" >
                                <SelectItem Value="@Dummy">Choose size</SelectItem>
                                @foreach (var pair in Sizes) 
                                {
                                    <SelectItem Value="@pair.Key">@pair.Key</SelectItem>
                                }
                            </Select>
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </Validation>
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>Dough</FieldLabel>
                        <Validation>
                            <Select TValue="string" @bind-SelectedValue="@Order.Pizza.Dough" > 
                                <SelectItem Value="@Dummy">Choose dough type</SelectItem>
                                @foreach (var pair in Doughs) 
                                {
                                    <SelectItem Value="@pair.Key">@pair.Key</SelectItem>
                                }
                            </Select>
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </Validation>
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>Sauce</FieldLabel>
                        <Validation>
                            <Select TValue="string" @bind-SelectedValue="@Order.Pizza.BaseSauce" >
                                <SelectItem Value="@Dummy">Choose sauce</SelectItem>
                                @foreach (var pair in Sauces) 
                                {
                                    <SelectItem Value="@pair.Key">@pair.Key</SelectItem>
                                }
                            </Select>
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </Validation>
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>Toppings</FieldLabel>
                        <Validation Validator="@ValidateToppings">
                            <Select TValue="string" Multiple SelectedValuesChanged="@(topps => Order.Pizza.Toppings = topps.ToList<string>())">
                                @foreach (var pair in Toppings) 
                                {
                                    <SelectItem Value="@pair.Key">@pair.Key</SelectItem>
                                }
                            </Select>
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </Validation>
                    </Field>
                </Column>
            </Row>
            <Row>
                <Column ColumnSize="ColumnSize.Is3">
                    <Button class="btn-primary" Type="ButtonType.Submit" PreventDefaultOnSubmit="true" Color="Color.Warning" Clicked="@HandleSubmit">Submit</Button>
                </Column>
            </Row>
        </Validations>
    </EditForm>
    <br />
    <br />
</div>

@*Modal*@
<Modal @ref="modalRef">
    <ModalContent Centered="true">
        <ModalHeader>
            <ModalTitle>Order Submitted &#x1F60a; </ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>@Message LE &#128176;</FieldLabel>
            </Field>
        </ModalBody>
    </ModalContent>
</Modal>

@code {

    public Dictionary<string, double> Sizes { get; set; } = new();
    public Dictionary<string, double> Doughs { get; set; } = new();
    public Dictionary<string, double> Sauces { get; set; } = new();
    public Dictionary<string, double> Toppings { get; set; } = new();
        
    public OrderWeb Order { get; set; } = new();
    private Modal modalRef;
    string Dummy = ""; 
    Validations Validations;

    public string Message { get; set; }

    void ValidateToppings(ValidatorEventArgs e)
    {
        string[] chosen = e.Value as string[];

        if (chosen is not null) 
        {
            e.Status = chosen.Length > 0 ? ValidationStatus.Success: ValidationStatus.Error;
        }
        else
        {
            e.Status = ValidationStatus.Error;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            var client = _clientFactory.CreateClient("localhost");
            var response = await client.GetStringAsync("menu");
            JsonObject? menu = JsonNode.Parse(response).AsObject();

            var sizes = menu["sizeTable"].AsArray();
            foreach (var obj in sizes)
            {
                Sizes.Add((string)obj["option"], (double)obj["multiplier"]);
            }

            var bases = menu["baseTable"].AsArray();
            foreach (var obj in bases)
            {
                Sauces.Add((string)obj["option"], (double)obj["price"]);
            }

            var dough = menu["doughTable"].AsArray();
            foreach (var obj in dough)
            {
                Doughs.Add((string)obj["option"], (double)obj["price"]);
            }

            var toppings = menu["toppingTable"].AsArray();
            foreach (var obj in toppings)
            {
                Toppings.Add((string)obj["option"], (double)obj["price"]);
            }

            StateHasChanged();
        }
    } 

    public async Task HandleSubmit() 
    {
        if (!Validations.ValidateAll())
        {
            return;
        }

        var client = _clientFactory.CreateClient("localhost");
        var jsonPizza = JsonSerializer.Serialize<Pizza>(Order.Pizza, new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        });

        var request = new HttpRequestMessage
        {
            Method = HttpMethod.Get,
            RequestUri = new Uri(client.BaseAddress.ToString() + "price"),
            Content = new StringContent(jsonPizza, Encoding.UTF8, "application/json"),
        };
        var price = await client.SendAsync(request);
        Order.Pizza.Price = Double.Parse(await price.Content.ReadAsStringAsync());
        
        var jsonOrder = JsonSerializer.Serialize<OrderWeb>(Order);

        StringContent newOrder = new StringContent(jsonOrder, Encoding.UTF8, "application/json");
        var response = await client.PostAsync("web-order", newOrder);

        if (response.IsSuccessStatusCode)
        {
            Message = $"Thank you for visiting our restaurant!\nThe total price is {Order.Pizza.Price}";
        }
        else
        {
            Message = "We could not place your order :(";
        }

        modalRef.Show();
    }
}